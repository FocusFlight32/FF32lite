/*

FF32lite from FocusFlight, a new alternative firmware
for the Naze32 controller

Original work Copyright (c) 2013 John Ihlein

This file is part of FF32lite.

Includes code and/or ideas from:

  1)BaseFlight
  2)S.O.H. Madgwick

FF32lite is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

FF32lite is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with FF32lite. If not, see <http://www.gnu.org/licenses/>.

*/

///////////////////////////////////////////////////////////////////////////////

#pragma once

///////////////////////////////////////////////////////////////////////////////
// UART1 Init
///////////////////////////////////////////////////////////////////////////////

void uart1Init(uint32_t baudRate);

///////////////////////////////////////////////////////////////////////////////
// UART1 Available
///////////////////////////////////////////////////////////////////////////////

uint32_t uart1Available(void);

///////////////////////////////////////////////////////////////////////////////
// UART1 Clear Buffer
///////////////////////////////////////////////////////////////////////////////

void uart1ClearBuffer(void);

///////////////////////////////////////////////////////////////////////////////
// UART1 Number of Characters Available
///////////////////////////////////////////////////////////////////////////////

uint16_t uart1NumCharsAvailable(void);

///////////////////////////////////////////////////////////////////////////////
// UART1 Read
///////////////////////////////////////////////////////////////////////////////

uint8_t uart1Read(void);

///////////////////////////////////////////////////////////////////////////////
// UART1 Read Poll
///////////////////////////////////////////////////////////////////////////////

uint8_t uart1ReadPoll(void);

///////////////////////////////////////////////////////////////////////////////
// UART1 Write
///////////////////////////////////////////////////////////////////////////////

void uart1Write(uint8_t ch);

///////////////////////////////////////////////////////////////////////////////
// UART1 Print
///////////////////////////////////////////////////////////////////////////////

void uart1Print(char *str);

///////////////////////////////////////////////////////////////////////////////
// UART1 Print Formatted - Print formatted string to UART1
// From Ala42
///////////////////////////////////////////////////////////////////////////////

void uart1PrintF(const char * fmt, ...);

///////////////////////////////////////////////////////////////////////////////
// UART1 Print Binary String
///////////////////////////////////////////////////////////////////////////////

void uart1PrintBinary(uint8_t *buf, uint16_t length);

///////////////////////////////////////////////////////////////////////////////
